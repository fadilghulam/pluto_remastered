openapi: 3.0.0
info:
  title: Test API Documentation
  description: API for user registration, authentication, and profile management.
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/test-bcd/DokumentasiApi1/1.0.0
  - url: https://api.example.com/v1
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: SecurePassword123
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user_id:
                    type: integer
                    example: 12345
        "400":
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already exists
  /auth/login:
    post:
      summary: User login
      description: Logs in a user and returns an access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: SecurePassword123
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1...
                  expires_in:
                    type: integer
                    example: 3600
        "401":
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
  /users/me:
    get:
      summary: Get user profile
      description: Retrieves the authenticated userâ€™s profile.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12345
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    format: email
                    example: johndoe@example.com
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
  /auth/logout:
    post:
      summary: Logout user
      description: Logs out the user by invalidating the token.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        "401":
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid token
  /users:
    get:
      summary: Get user details
      description: Retrieve user details using an ID (required) and status (optional).
      parameters:
        - name: id
          in: query
          required: true # This parameter is required
          schema:
            type: integer
            example: 123
        - name: status
          in: query
          required: false # This parameter is optional
          schema:
            type: string
            enum: [active, inactive]
            example: active
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 123
                  name:
                    type: string
                    example: John Doe
                  status:
                    type: string
                    example: active
  /user:
    post:
      summary: Create a new user
      description: Create a user with required and optional fields.
      requestBody:
        required: true # This means the body itself is required
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                age:
                  type: integer
                  example: 30
              required:
                - name
                - email # These two fields must be present
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: johndoe@example.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
